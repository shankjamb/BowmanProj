module fft_top (
    input wire clk,
    input wire rst,
    input wire [15:0] data_in,         // Real input (Q1.15 fixed-point)
    input wire data_valid,
    input wire data_last,             // TLAST input to signal end of frame
    output wire [31:0] fft_out,        // Output: [31:16]=real, [15:0]=imag
    output wire fft_out_valid
);

// Wire declarations
wire s_axis_data_tready;
wire [31:0] fft_input;
assign fft_input = {data_in, 16'd0};  // Imaginary part is 0

// Config control (pulse config_valid once)
reg config_sent = 0;
wire config_valid;

always @(posedge clk or posedge rst) begin
    if (rst) begin
        config_sent <= 0;
    end else if (!config_sent) begin
        config_sent <= 1;
    end
end

assign config_valid = ~config_sent;

// FFT IP instance
xfft_0 fft_inst (
    .aclk(clk),
    .s_axis_data_tvalid(data_valid),
    .s_axis_data_tready(s_axis_data_tready),
    .s_axis_data_tdata(fft_input),
    .s_axis_data_tlast(data_last),                  // TLAST connected

    .s_axis_config_tvalid(config_valid),
    .s_axis_config_tdata(8'b00000000),              // Forward FFT

    .m_axis_data_tvalid(fft_out_valid),
    .m_axis_data_tdata(fft_out),

    // Optional debug/event ports can be added if needed
    .event_frame_started(),
    .event_tlast_unexpected(),
    .event_tlast_missing()
    //.event_data_in_channel_halt(),
    //.event_data_out_channel_halt()
);

endmodule
